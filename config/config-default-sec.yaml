# SPDX-FileCopyrightText: 2022 Koen van Greevenbroek & Aleksander Grochowicz
#
# SPDX-License-Identifier: CC0-1.0

# The name needs to match the filename of this config.
name: "default-sec"

# The scenario config is used only in order to determine which results
# are required for the various "*_all_*" Snakemake rules. Each entry
# corresponds to a Snakemake wildcard. Multiple values may be
# specified for each wildcard; all combinations will be computed. See
# the Snakefile for a description of each wildcard.
scenario:
  year: ["1990", "2000"]
  simpl: [""]
  clusters: ["60"]
  # NOTE: this wildcard is used both for pypsa-eurs "ll" and pypsa-eur-secs "lv"
  ll: [1.5]
  opts: [""]
  sector_opts: ["Co2L0-3H-T-H-B-I-A-solar+p3-dist1"]
  planning_horizons: ["2030"]
  eps: ["0.05uni1980-2019"]
  method: ["mean", "exact", "naive", "conservative"]
  operation_method: ["-single-years"]

# The following config section relates to how the near-optimal
# feasible space is approximated.
near_opt_approx:
  # Essential configuration:
  
  # Direction generation method, either "facets", "random-uniform",
  # "random-lhc", "maximal-centre" or "maximal-centre-then-facets".
  directions: "maximal-centre-then-facets"
  # Minimum angle threshold between directions.
  directions_angle_separation: 45
  # The number of parallel solvers used in the near-optimal feasible
  # space approximation.
  num_parallel_solvers: 4

  # Convergence configuration. All in all, the below means that the
  # near-optimal space approximation will terminate when the volume
  # changes by less than `conv_epsilon` percent for any `conv_iterations` 
  # consecutive iterations, or after `iterations` iterations at most. 
  # Number of iterations.
  iterations: 150
  # Convergence method, either "centre" or "volume".
  conv_method: "volume"
  # Convergence epsilon in percent.
  conv_epsilon: 3
  # Number of iterations for which the convergence criterion must be
  # below the convergence epsilon before the approximation stops.
  conv_iterations: 50

  # Optional configuration:
  
  # Command line options for the `qhull` program, which is used to
  # compute convex hulls, may be defined here. The default options
  # usually work well in which case this is not needed. If qhull fails
  # for any reason, one could try to options "W1e-6 C1e-6 Q12" to get
  # an approximate convex hull computation (see
  # http://www.qhull.org/html/qh-optq.htm).
  # qhull_options: "Qx"

  # Angle tolerance: when no new directions are found which are at
  # least this number of degrees away from previously used directions,
  # we stop the approximation.
  # angle_tolerance: 0.1

# Specification of the basis we project the near-optimal feasible space onto. 
projection:
  solar:
    - {c: "Generator", v: "p_nom", carrier: "solar", weight: "capital_cost", scale_by_years: True}
  onwind:
    - {c: "Generator", v: "p_nom", carrier: "onwind", weight: "capital_cost", scale_by_years: True}
  offwind:
    - {c: "Generator", v: "p_nom", carrier: "offwind-ac", weight: "capital_cost", scale_by_years: True}
    - {c: "Generator", v: "p_nom", carrier: "offwind-dc", weight: "capital_cost", scale_by_years: True}
  gas:
    - {c: "Generator", v: "p_nom", carrier: "OCGT", weight: "capital_cost", scale_by_years: True}


# The following section is used as pypsa-eur configuration (updating
# the default pypsa-eur config)
pypsa-eur:
  run:
    shared_cutouts: true

  enable:
    retrieve_opsd_load_data: false
    retrieve_artificial_load_data: true

  # For all the following configuration, see the PyPSA-Eur documentation.
  electricity:
    co2limit: 7.75e+7 # 0.05 * 3.1e9*0.5
    co2base: 1.487e+9

    extendable_carriers:
      Generator: ["solar", "onwind", "offwind-ac", "offwind-dc", "OCGT"]
      StorageUnit: ["battery", "H2"]
      Store: []
      Link: []

    # Use all renewable carriers
    renewable_carriers: ["solar", "onwind", "offwind-ac", "offwind-dc", "hydro"]
    # Add existing nuclear and biomass power plants to the model. Note
    # that we do not include OCGT here, but since OCGT is defined as
    # an extendable carrier, it will be added to the model at 0
    # initial capacity.
    conventional_carriers: ["nuclear", "biomass"] # nuclear, oil, OCGT, CCGT, coal, lignite, geothermal, biomass

    # Remove nuclear from Germany.
    powerplants_filter: "(Country != 'DE') or (Fueltype != 'Nuclear')"

    # Make this a greenfield optimisation w.r.t. renewables.
    estimate_renewable_capacities:
      enable: false

  load:
    # Baseline in European Commission scenario from
    # https://ec.europa.eu/clima/eu-action/european-green-deal/2030-climate-target-plan_en
    scaling_factor: 1.13

  atlite:
    nprocesses: 4
    show_progress: False # This improves performance by a lot.
    cutouts:
      # use "base" to determine geographical bounds and time span from config.
      europe-era5:
        module: "era5"

  renewable:
    # Note that the cutouts have been renamed from default PyPSA-Eur.
    onwind:
      cutout: "europe-era5_{weather_year}"
    offwind-ac:
      cutout: "europe-era5_{weather_year}"
    offwind-dc:
      cutout: "europe-era5_{weather_year}"
    solar:
      cutout: "europe-era5_{weather_year}"
    hydro:
      cutout: "europe-era5_{weather_year}"
      eia_correct_by_capacity: true
      eia_approximate_missing: true

  solving:
    options:
      formulation: "kirchhoff"
      noisy_costs: False
      skip_iterations: True
      track_iterations: False
    tmpdir: "./tmp/"
    solver:
      name: "gurobi"
      # LogToConsole: 0
      threads: 2
      method: 2 # barrier
      crossover: 0
      BarConvTol: 1.e-5
      FeasibilityTol: 1.e-6
      AggFill: 0
      PreDual: 0
      GURO_PAR_BARDENSETHRESH: 200


pypsa-eur-sec:
  atlite:
    cutout: europe-era5_{weather_year}
